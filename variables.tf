##############################################################
##############################################################
#######                Standard Variables              #######
##############################################################
##############################################################

variable "application_name" {
  description = "Project/application name"
  nullable    = false
  sensitive   = false
  type        = string

  validation {
    condition     = length(var.application_name) <= 20 && can(regex("^[a-z0-9]*$", var.application_name))
    error_message = "The application_name must be lowercase alphanumeric characters and have a maximum length of 20 characters."
  }

}

variable "application_shortname" {
  description = "short version of project/application name"
  nullable    = false
  sensitive   = false
  type        = string

  validation {
    condition     = length(var.application_shortname) <= 6 && can(regex("^[a-z0-9]*$", var.application_shortname))
    error_message = "The application_shortname must be lowercase alphanumeric characters and have a maximum length of 6 characters."
  }

}

variable "default_tags" {
  default     = {}
  description = "Default map of tags to be applied to all resources generated by this module."
  nullable    = false
  sensitive   = false
  type        = map(string)
}

variable "environment_tag" {
  description = "Environment tag e.g. dev, test, systest, UAT, Prod"
  nullable    = false
  sensitive   = false
  type        = string

  validation {
    condition     = can(regex("^(dev|poc|prod|uat|stg|sys)$", var.environment_tag))
    error_message = "Invalid environment tag. Allowed values are dev, uat, stg, sys, poc, and prod."
  }

}

##############################################################
##############################################################
#######        provider specific variables             #######
##############################################################
##############################################################

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~               AWS variables                     ~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

variable "aws_access_key" {
  description = "AWS access key"
  default     = ""
  nullable    = false
  sensitive   = true
  type        = string

  validation {
    condition     = can(regex("^[A-Z0-9]{20}$", var.aws_access_key))
    error_message = "Invalid AWS Access Key format"
  }

}

variable "aws_profile" {
  description = "AWS profile"
  default     = ""
  nullable    = false
  sensitive   = false
  type        = string
}

variable "aws_resource_location" {
  description = "Resource location. Must be a valid AWS region"
  default     = "eu-west-1"
  nullable    = false
  sensitive   = false
  type        = string

  validation {
    condition     = can(element(["eu-west-1", "eu-west-2", "eu-west-1", "eu-south-1", "eu-west-3", "eu-south-2", "eu-north-1", "eu-central-2"], var.aws_resource_location))
    error_message = "Invalid AWS resource location. Must be an approved AWS region."
  }

}

variable "aws_secret_key" {
  description = "AWS secret key"
  default     = ""
  nullable    = false
  sensitive   = true
  type        = string

  validation {
    condition     = can(length(var.aws_secret_key) == 40)
    error_message = "Invalid AWS Secret Key. It must be a 40-character string."
  }

}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~               Azure DevOps variables            ~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

variable "azdo_orgurl" {
  description = "short version of project/application name"
  nullable    = true
  default     = null
  sensitive   = false
  type        = string

  validation {
    condition     = can(regex("^https://dev.azure.com", var.azdo_orgurl)) || var.azdo_orgurl == null
    error_message = "The Azure Devops URL must start with 'https://dev.azure.com'"
  }
}

variable "azdo_pat" {
  description = "Azure Devops Personal Access token (can be set to system.accesstoken)"
  nullable    = true
  sensitive   = true
  type        = string

  validation {
    condition     = can(length(var.azdo_pat) == 52) || var.azdo_pat == null
    error_message = "Invalid Azure DevOps PAT. It must be a 52-character string."
  }

}

variable "azdo_project_name" {
  description = "azure devops project name"
  nullable    = false
  sensitive   = false
  type        = string

  validation {
    condition     = length(var.azdo_project_name) <= 64
    error_message = "Azure DevOps project name must not contain more than 64 characters."
  }
  validation {

    condition     = !can(regex("^App_Browsers$|^App_code$|^App_Data$|^App_GlobalResources$|^App_LocalResources$|^App_Themes$|^App_WebResources$|^bin$|^web.config$", var.azdo_project_name))
    error_message = "Azure DevOps project name must not be one of the hidden segments used for IIS request filtering."
  }
  validation {

    condition     = can(regex("^[\u0020-\u007E]+$", var.azdo_project_name))
    error_message = "Azure DevOps project name must not contain Unicode control characters or surrogate characters."
  }
  validation {

    condition     = !can(regex("[\\\\/:*?\"<>|;#$*{} ,+=\\[\\]]", var.azdo_project_name))
    error_message = "Azure DevOps project name must not contain the specified printable characters: \\ / : * ? \" < > | ; # $ * { } , + = [ ]."
  }
  validation {

    condition     = !can(regex("^_", var.azdo_project_name))
    error_message = "Azure DevOps project name must not start with an underscore."
  }
  validation {

    condition     = !can(regex("^\\.|\\.$", var.azdo_project_name))
    error_message = "Azure DevOps project name must not start or end with a period."
  }
  validation {

    condition     = !can(regex("^AUX$|^COM[1-9]$|^CON$|^DefaultCollection$|^LPT[1-9]$|^NUL$|^PRN$|^SERVER$|^SignalR$|^Web$|^WEB$", var.azdo_project_name, "i"))
    error_message = "Azure DevOps project name must not be one of the reserved names: AUX, COM1-COM9, CON, DefaultCollection, LPT1-LPT9, NUL, PRN, SERVER, SignalR, Web, or WEB."
  }
}

variable "azdo_repo_name" {
  description = "The name of the Azure Devops Git Repository your code resides in"
  type        = string

  validation {
    condition     = length(var.azdo_repo_name) <= 64
    error_message = "Azure DevOps Repo name must not contain more than 64 characters."
  }

  validation {
    condition     = can(regex("^[\u0020-\u007E]+$", var.azdo_repo_name))
    error_message = "Azure DevOps Repo name must not contain Unicode control characters or surrogate characters."
  }

  validation {
    condition     = !can(regex("^AUX$|^COM[1-9]$|^CON$|^DefaultCollection$|^LPT[1-9]$|^NUL$|^PRN$|^SERVER$|^SignalR$|^Web$|^WEB$", var.azdo_repo_name, "i"))
    error_message = "Azure DevOps Repo name must not be one of the reserved names: AUX, COM1-COM9, CON, DefaultCollection, LPT1-LPT9, NUL, PRN, SERVER, SignalR, Web, or WEB."
  }
  validation {
    condition     = !can(regex("^_", var.azdo_repo_name))
    error_message = "Azure DevOps Repo name must not start with an underscore."
  }
  validation {
    condition     = !can(regex("^[.](.*)|[.](.*)$", var.azdo_repo_name))
    error_message = "Azure DevOps Repo name must not start or end with a period."
  }
  validation {

    condition     = !can(regex("[\\\\/:*?\"<>|;#$*{} ,+=\\[\\]]", var.azdo_repo_name))
    error_message = "Azure DevOps Repo name must not contain the specified printable characters: \\ / : * ? \" < > | ; # $ * { } , + = [ ]."
  }
  validation {

    condition     = can(regex("^[^A-Z]*$", var.azdo_repo_name))
    error_message = "Azure DevOps Repo name must not contain any uppercase characters"
  }
}


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~               AzureRM variables                 ~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

variable "azrm_client_id" {
  default     = null
  description = "Service principal id - cannot be null if working with azure"
  nullable    = true
  sensitive   = false
  type        = string

  validation {
    condition     = can(regex("^([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}$", var.azrm_client_id)) || var.azrm_client_id == null
    error_message = "Invalid Azure client ID format. It should be a valid UUID (GUID)."
  }

}
variable "azrm_client_secret" {
  default     = null
  description = "Service principal password - cannot be null if working with azure"
  nullable    = true
  sensitive   = true
  type        = string

  validation {
    condition     = can(length(var.azrm_client_secret) >= 12 && length(var.azrm_client_secret) <= 256) || var.azrm_client_secret == null
    error_message = "Invalid Azure service principal secret length. It should be between 12 and 256 characters."
  }

  validation {
    condition     = can(regex("^[A-Za-z0-9_-]+$", var.azrm_client_secret)) || var.azrm_client_secret == null
    error_message = "Invalid characters in Azure service principal secret. Only letters, numbers, underscores, and hyphens are allowed."
  }

}

variable "azrm_keyvault_whitelist" {
  default     = []
  description = "List of IP addresses and CIDR blocks for Key Vault whitelist to be combined with the defaults in main.tf"
  nullable    = false
  sensitive   = false
  type        = list(string)

}

variable "azrm_resource_location" {
  description = "Resource group location. Must be a valid azure region"
  default     = "northeurope"
  nullable    = false
  sensitive   = false
  type        = string

  validation {
    condition     = can(regex("^(northeurope|uksouth|westeurope)$", var.azrm_resource_location))
    error_message = "Invalid Azure Resource Manager Resource Location. Allowed values are northeurope, uksouth, and westeurope."
  }

}

variable "azrm_storage_whitelist" {
  default     = []
  description = "List of IP addresses and CIDR blocks for storage account whitelist to be combined with the defaults in main.tf"
  nullable    = false
  sensitive   = false
  type        = list(string)

}

variable "azrm_subscription_id" {
  default     = null
  description = "Azure subscription id - cannot be null if working with azure"
  nullable    = true
  sensitive   = false
  type        = string

  validation {
    condition     = can(regex("^([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}$", var.azrm_subscription_id)) || var.azrm_subscription_id == null
    error_message = "Invalid Azure subscription ID format. It should be a valid GUID."
  }

}

variable "azrm_tenant_id" {
  default     = null
  description = "Azure tenant id. cannot be null if working with Azure"
  nullable    = true
  sensitive   = false
  type        = string

  validation {
    condition     = can(regex("^([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}$", var.azrm_tenant_id)) || var.azrm_tenant_id == null
    error_message = "Invalid Azure tenant ID format. It should be a valid GUID."
  }

}

variable "resource_group_name" {
  description = "Specifies the name of the existing resource group to be used for the service plan"
  type        = string
  nullable    = false
  sensitive   = false
  validation {
    condition     = can(regex("^[a-zA-Z0-9-._\\(\\)]+[a-zA-Z0-9-_\\(\\)]$", var.resource_group_name))
    error_message = "Invalid characters in Resource Group Name. It may only contain underscores, hyphens, periods, parentheses, letters, or digits and should not end with a period."
  }

  validation {
    condition     = length(var.resource_group_name) <= 90
    error_message = "Resource group names must not contain more than 90 characters."
  }
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~               time variables                    ~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

variable "time_spn_expiry" {
  default     = 100
  description = "Number of years from now when service principal password should expire"
  nullable    = false
  sensitive   = false
  type        = number
}

variable "time_secret_expiry" {
  default     = 100
  description = "Number of years from now when keyvault secrets should expire"
  nullable    = false
  sensitive   = false
  type        = number
}
